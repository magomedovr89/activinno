from aiogram.types import ContentType
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from os import environ as env


bot = Bot(token=env['TOKEN'], parse_mode='HTML')
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç üñê\n–Ø –±–æ—Ç - –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ!\n'
                              f'–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-—Ç–æ, –∞ —è –±—É–¥—É –≤–∞—Å –¥—Ä–∞–∑–Ω–∏—Ç—å!')


@dp.message_handler(content_types=ContentType.TEXT)
async def bot_text(message: types.Message):
    await message.answer(text=f'{message.text}')


@dp.message_handler(content_types=ContentType.ANIMATION)
async def bot_animation(message: types.Message) -> bot.send_message:
    return await message.answer_animation(animation=message.animation.file_id, caption='ü§ò')


@dp.message_handler(content_types=ContentType.PHOTO)
async def bot_animation(message: types.Message) -> bot.send_message:
    return await message.answer_photo(photo=message.photo[0].file_id, caption='ü§ò')


@dp.message_handler(content_types=ContentType.ANY)
async def bot_any(message: types.Message):
    await message.answer(
        text=f'–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏ –≥–∏—Ñ–∫–∏, '
             f'{message.from_user.first_name}\n'
             f'¬Ø\_(„ÉÑ)_/¬Ø',
    )

if __name__ == '__main__':
    executor.start_polling(dp)
